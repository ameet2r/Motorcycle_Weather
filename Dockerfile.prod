ARG PYTHON_VERSION=3.11.4
FROM python:${PYTHON_VERSION}-slim AS base

# Prevents Python from writing pyc files.
ENV PYTHONDONTWRITEBYTECODE=1

# Keeps Python from buffering stdout and stderr to avoid situations where
# the application crashes without emitting any logs due to buffering.
ENV PYTHONUNBUFFERED=1

# Set production environment
ENV ENVIRONMENT=production

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    --no-install-recommends \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create a non-privileged user that the app will run under.
ARG UID=10001
RUN adduser \
    --disabled-password \
    --gecos "" \
    --home "/nonexistent" \
    --shell "/sbin/nologin" \
    --no-create-home \
    --uid "${UID}" \
    appuser

# Copy requirements first for better Docker layer caching
COPY requirements.txt .

# Download dependencies as a separate step to take advantage of Docker's caching.
# Railway-compatible approach without cache mounts
RUN python -m pip install --no-cache-dir -r requirements.txt

# Copy the source code into the container.
COPY server/ ./server/

# Change ownership of the app directory to the non-privileged user
RUN chown -R appuser:appuser /app

# Switch to the non-privileged user to run the application.
USER appuser

# Change working directory to server so imports work correctly
WORKDIR /app/server

# Expose the port that the application listens on.
EXPOSE 8000

# Add health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Run the application in production mode (no reload)
# Now we can use main:app since we're in the server directory
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "1"]